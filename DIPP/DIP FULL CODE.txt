Practical no 1 Linear Convolution

% Prompt user to enter the input signal x(n) and impulse response h(n)
x = input("Enter for x(n):");
h = input("Enter for h(n):");
% Determine the lengths of x(n) and h(n)
n1 = length(x);
n2 = length(h);
% Compute the length of the output signal y(n)
N = n1 + n2 - 1;
% Zero-pad x(n) and h(n) so that they are both of length N
x = [x, zeros(1,N-n1)];
h = [h, zeros(1,N-n2)];
% Initialize the output signal y(n) to all zeros
y = zeros(1,N);
% Compute the convolution sum for each value of n from 1 to N
for n = 1:N
    for k = 1:n
        % Compute the sum of x(k)h(n-k+1) for k = 1 to n
        y(n) = y(n) + x(k)*h(n-k+1);
    end
end
% Display the resulting output signal y(n)
disp(y);
% Set the range of the x-axis for the plots
ny = 0:N-1;
% Plot the input signal x(n), impulse response h(n), and output signal y(n)
subplot(3,1,1);
plot2d3(ny,x);
xlabel("n");
ylabel("x(n)");
title("Input signal x(n)");
subplot(3,1,2);
plot2d3(ny,h);
xlabel("n");
ylabel("h(n)");
title("Impulse response h(n)");
subplot(3,1,3);
plot2d3(ny,y);
xlabel("n");
ylabel("y(n)");
title("Output signal y(n)");

 2. Circular Convolution
% Clear any previously defined variables in the workspace and the command window
clc;
clear all;
% Prompt the user to input two sequences
g = input("Enter the first sequence g: ");
h = input("Enter the second sequence h: ");
% Determine the lengths of the sequences
n1 = length(g);
n2 = length(h);
% Determine the length of the output sequence
n = max(n1,n2);
% Check if the lengths of the two sequences are different
% If so, pad the shorter sequence with zeros to make it the same length as the longer sequence
n3 = n1-n2;
if(n3 > 0)
    h = [h, zeros(1,n3)];
else
    g = [g, zeros(1,-n3)];
end
% Compute the convolution of the two sequences using the discrete convolution formula
for p = 1:n
    y(p) = 0; % Initialize the value of y at each index p to zero
    for q = 1:n
        j = p-q+1; % Compute the index j for sequence h
        if(j <= 0) % Handle wraparound when j becomes negative
            j = n+j;
        end
        y(p) = y(p) + g(q)*h(j); % Compute the sum of products required by the convolution formula
    end
end
% Display the output sequence
disp(y)
% Plot the output sequence
subplot(2,1,1);
plot(y);

3. Image Quantization
% Clear the command window and workspace
clc; clear all;
% Read an image file from a specific file path and store it in variable "I"
I = imread("C:\Users\harsh\Downloads\Desktop\Image\ME.jpg");
% Convert image data to double precision floating point format for numerical calculations
I = double(I);

% Display the contents of "I" in the command window
disp("i===", I);
% Find the maximum value in "I" and store it in variable "b"
b = max(I);
% Display the value of "b" in the command window
disp("b=", b);
% Prompt the user to input the number of bits to use for quantization
a = input("How many bits do you want to use for quantization? (1, 2, 4, or 6)");
% Calculate the size of the quantization intervals
c = b / (2 * a);
% Quantize the image by dividing each pixel value by "c" and rounding down to the nearest integer
f = floor(I / c);
% Display the quantized image in the command window
disp("f=", f);
% Scale the values of "f" to the range [0, 255] using the maximum value of "f"
f1 = (f * 255) / max(f);
% Display the original image in Figure 1
figure(1)
imshow(uint8(I))
% Display the quantized image in Figure 2
figure(2)
imshow(uint8(f1))







Prac 4: Bit resolution
% Close all existing figures to start with a clean slate
close all;
% Read an image from the specified file path and display it
x = imread("C:\Users\harsh\Downloads\Desktop\Image\ME.jpg");
imshow(x);
% Get the size of the image and display it
[r, c, s] = size(x);
disp([r c s]);
% Find the maximum value in the image and display it
m = max(max(max(x)));
disp(m);
% Define an array of downsampling factors
b = [2 3 4];
% Loop through the downsampling factors
for i = 1:length(b)
 % Divide the image by the downsampling factor and round the result
    d = 2^b(i);
    z = round(x/d);
 % Display the downsampled image
    figure
    imshow(z*d)
    end






Prac 5: Idft-dft
clc ;            // clear command window
clear all;       // clear all variables
close ;          // close all figures
x = input ( " e n t e r x s e q " ) ;  // prompt user to enter input sequence
h = input ( "e n t e r h s e q " ) ;  // prompt user to enter impulse sequence
m = length ( x ) ;   // get length of input sequence
n = length ( h ) ;   // get length of impulse sequence
N = n +m -1;    // calculate length of output sequence after convolution
x=[x,zeros(1,N-m)];    // pad input sequence with zeros to length N
h=[h,zeros(1,N-n)];    // pad impulse sequence with zeros to length N
f1 = fft( x );    // perform FFT on padded input sequence
disp("f1",f1);    // display FFT result
f2 = fft( h );    // perform FFT on padded impulse sequence
f3 = f1 .* f2 ;   // perform frequency domain multiplication of input and impulse sequences
f4 = ifft ( f3 );   // perform inverse FFT on frequency domain result to get time domain convolution result
disp ( f4 ," C o n v ol u ti o n Sum R e s u l t DFT âˆ’ IDFT method = ");   // display convolution result using DFT-IDFT method
// f 4 = r e a l ( f 4 )
subplot (3 ,1 ,1) ;   // divide the figure window into 3 rows, 1 column, and select the first subplot
plot2d3 ( x );    // plot input sequence in the first subplot
xtitle ( " Input sequence" );   // set title for first subplot
subplot (3 ,1 ,2) ;   // select the second subplot
plot2d3 (h );    // plot impulse sequence in the second subplot
xtitle ( " Impulse sequence" ) ;   // set title for second subplot
subplot (3 ,1 ,3) ;   // select the third subplot
plot2d3 ( f4 );   // plot convolution result in the third subplot
xtitle ( " Resultant sequence ") ;   // set title for third subplot

Prac 6
Image Negative
clc; % This line clears the command window in MATLAB to improve readability.

original = imread("C:\Users\harsh\Downloads\Desktop\Image\ME.jpg"); % This line reads in an image file called "ME.jpg" from the specified file path and stores it in the variable 'original'.
imgdouble = double(original); % This line converts the data type of the 'original' image from uint8 (8-bit) to double (64-bit) to allow for more precise mathematical operations.
%For 8 bit image
c = 255; % This line sets the maximum pixel intensity value for an 8-bit grayscale image (the range is 0 to 255).
negative = c - original; % This line computes the negative image by subtracting each pixel value of the original image from the maximum intensity value (255 in this case).
figure(1) % This line creates a new figure window with the number '1'.
imshow(original); % This line displays the original image in the first figure window.
figure(2) % This line creates a new figure window with the number '2'.
imshow(negative); % This line displays the negative image in the second figure window.
% Note that the 'imshow' function is used to display the images, and the 'figure' function is used to create new figure windows.

Threshold
% Clear command window
clc;
% Load image from specified path
original = imread("C:\Users\harsh\Downloads\Desktop\Image\cameraman.png");
% Make a copy of the original image
dup = original;
% Get the dimensions of the image
[row column] = size(dup);

% Ask user to input a threshold value
thresh = input("Enter value of threshold");

% Loop through each pixel in the image
for i = 1:row
    for j = 1:column
        % Check if pixel value is less than the threshold value
        if(original(i,j) < thresh)
            % Set the corresponding pixel in the copy to 0 (black)
            dup(i,j) = 0;
        else
            % Set the corresponding pixel in the copy to 255 (white)
            dup(i,j) = 255;
        end
    end
end
% Display the original image
figure(1), imshow(original);
% Display the thresholded image
figure(2), imshow(dup);

Grey Level Slicing with Background
clc; % clear command window
original=imread("C:\Users\harsh\Downloads\Desktop\Image\ME.jpg"); % read in the image
doub=double(original); % convert the image to a double precision array
[row column]=size(doub); % get the dimensions of the array
for i=1:1:row % iterate through the rows
 for j=1:1:column % iterate through the columns
 if((doub(i,j)> 50)) && (doub(i,j)<150) % if the pixel value is between 50 and 150
 doub(i,j)=0; % set the pixel value to 0
 end
 end
end
figure(1), imshow(original); % display the original image in figure 1
figure(2),imshow(uint8(doub)); % display the modified image in figure 2, converting back to uint8 format

Grey Level Slicing without Background
% Clear the command window and any existing figures
clc;
% Load the image 'cameraman.jpg' from the specified directory
original=imread("C:\Users\Tanushree\Downloads\Desktop\Image\cameraman.jpg");
% Convert the image to a matrix of doubles (pixel values ranging from 0 to 255)
doub=double(original);
% Get the number of rows and columns of the image matrix
[row column]=size(doub);
% Loop through each pixel in the image matrix
for i=1:1:row
    for j=1:1:column
        % Check if the pixel value is between 50 and 150
        if((doub(i,j)> 50)) && (doub(i,j)<150)
            % If the pixel value is within the range, replace it with the
            % corresponding pixel value from the original image
            doub(i,j)=original(i,j);
        end
    end
end
% Display the original image
figure(1), imshow(original);
% Display the modified image (converted back to uint8 format)
figure(2),imshow(uint8(doub))

Bitplane
clc;  % clear the command window
 % read the input image from file path and store it in 'c'
c = imread("C:\Users\harsh\Downloads\Desktop\Image\ME.jpg");
 % convert the image information to double format and store it in 'cd'
cd = double(c);
 % extract the binary bit values of each pixel and store them in separate bit planes
% 'modulo' function performs modulo division of each pixel value with a power of 2, which extracts the corresponding binary bit value
c1 = modulo(cd, 2);  % LSB bit plane
c2 = modulo(floor(cd/2), 2);
c3 = modulo(floor(cd/4), 2);
c4 = modulo(floor(cd/8), 2);
c5 = modulo(floor(cd/16), 2);
c6 = modulo(floor(cd/32), 2);
c7 = modulo(floor(cd/64), 2);
c8 = modulo(floor(cd/128), 2);  % MSB bit plane
 % recombine the bit planes to form an image equivalent to the original grayscale image
% multiply each bit plane with its corresponding power of 2 and then sum them up
cc = (2 * (2 * (2 * (2 * (2 * (2 * (2 * c8 + c7) + c6) + c5) + c4) + c3) + c2) + c1);
 % display the original image in the first subplot
subplot(2, 5, 1);
imshow(c);
title('Original Image');
 % display the bit planes from LSB to MSB in subplots 2 to 9
subplot(2, 5, 2);
imshow(c1);
title('Bit Plane 1');
subplot(2, 5, 3);
imshow(c2);
title('Bit Plane 2');
subplot(2, 5, 4);
imshow(c3);
title('Bit Plane 3');
subplot(2, 5, 5);
imshow(c4);
title('Bit Plane 4');
subplot(2, 5, 6);
imshow(c5);
title('Bit Plane 5');
subplot(2, 5, 7);
imshow(c6);
title('Bit Plane 6');
subplot(2, 5, 8);
imshow(c7);
title('Bit Plane 7');
subplot(2, 5, 9);
imshow(c8);
title('Bit Plane 8');
 % display the recombined image in the last subplot
subplot(2, 5, 10);
imshow(uint8(cc));  % convert the double format to uint8 format for display
title('Recombined Image');


Prac 7 Erosion and Dilation
// Set up a 10x10 matrix with all zeros, and set a 4x4 block in the center to 1
adilate=zeros(10,10);
adilate(4:7,4:7)=1

// Create a 3x3 rectangular structuring element
struele=imcreatese("rect",3,3);

// Dilate the "adilate" matrix using the "struele" structuring element
afterdilate=imdilate(adilate,struele);

// Print the resulting matrix after dilation
//disp(afterdilate);

// Open the "adilate" matrix using the "struele" structuring element
afteropen=imopen(adilate,struele);

// Print the resulting matrix after opening
disp(afteropen);

// Set up a 10x10 matrix with all zeros, and set a 4x4 block in the center to 1
aerode=zeros(10,10);
aerode(4:7,4:7)=1

// Print the matrix after setting the block to 1
disp(aerode);

// Create a 3x3 rectangular structuring element
struele=imcreatese("rect",3,3);

// Erode the "aerode" matrix using the "struele" structuring element
aftererode=imerode(aerode,struele);

// Print the resulting matrix after erosion
disp(aftererode);

// Read an image "cameraman.jpg" from the desktop
original=imread("C:\Users\Dhruv\Desktop\cameraman.jpg")

// Create a 3x3 rectangular structuring element
se=imcreatese("rect",3,3);

// Dilate the original image using the structuring element
dilate=imdilate(original,se);

// Show the original image
figure(1);
imshow(original);

// Show the dilated image
figure(2);
imshow(dilate);

// Erode the original image using the structuring element
erode=imerode(original,se);

// Show the eroded image
figure(3);
imshow(erode);

// Open the original image using the structuring element
afteropen=imopen(original,se);

// Show the resulting image after opening
figure(4);
imshow(afteropen);

// Close the original image using the structuring element
afterclose=imclose(original,se);

// Show the resulting image after closing
figure(5);title("Closing")
imshow(afterclose);

// Read an image "morph2.bmp" from the desktop
S=imread("C:\Users\Dhruv\Desktop\morph2.bmp");

// Create an 11x11 elliptical structuring element
se = imcreatese('ellipse',11,11);

// Close the image using the elliptical structuring element
S2 = imclose(S,se);

// Show the resulting image after closing
figure(6);
imshow(S2);

// Read an image "morph2.bmp" from the desktop
S=imread("C:\Users\Dhruv\Desktop\morph2.bmp")

// Create a 9x9 elliptical structuring element
se = imcreatese('ellipse',9,9);

// Open the image using the elliptical structuring element
S2 = imopen(S,se);

// Show the resulting image after opening
figure(7);
imshow(S2);

Prac 8 : LPF and HPF

% Clear the command window
clc;

% Read the input image
a1=imread("C:\Users\Dhruv\Desktop\cameraman.jpg");

% Convert the image to double format
a=double(a1);

% Get the size of the input image
[m,n]=size(a);

% Define the low pass filter kernel
w=[1 1 1;1 1 1;1 1 1];

% Apply the low pass filter on the input image
for i=2:m-1
    for j=2:n-1
        % Convolve the kernel with the image pixels
        b(i,j)=[w(1)*a(i-1,j+1)+w(2)*a(i,j+1)+w(3)*a(i+1,j+1)+w(4)*a(i-1,j)+w(5)*a(i,j)+w(6)*a(i+1,j)+w(7)*a(i-1,j-1)+w(8)*a(i,j-1)+w(9)*a(i+1,j-1)]/9;
    end
end

% Convert the result to unsigned 8-bit format
c=uint8(b);

% Display the low pass filtered image
figure(1);imshow(c);title("low pass image")      

% Clear the command window
clc;

% Read the input image
a1=imread("C:\Users\Dhruv\Desktop\cameraman.jpg");

% Convert the image to double format
a=double(a1);

% Get the size of the input image
[m,n]=size(a);

% Define the high pass filter kernel
w=[-1 -1 -1;-1 8 -1;-1 -1 -1];

% Apply the high pass filter on the input image
for i=2:m-1
    for j=2:n-1
        % Convolve the kernel with the image pixels
        H(i,j)=[w(1)*a(i-1,j+1)+w(2)*a(i,j+1)+w(3)*a(i+1,j+1)+w(4)*a(i-1,j)+w(5)*a(i,j)+w(6)*a(i+1,j)+w(7)*a(i-1,j-1)+w(8)*a(i,j-1)+w(9)*a(i+1,j-1)]/9;
    end
end

% Convert the result to unsigned 8-bit format
D=uint8(H);

% Display the high pass filtered image
figure(2);imshow(D);title("High pass image")      

% Display the original input image
figure(3);imshow(a1);title("Original image")

Prac 9 Prewitt and Sobel operator
clc;            % Clears the command window
clear all;      % Clears all the variables in the workspace
a=imread("C:\Users\Dhruv\Desktop\cameraman.jpg"); % Reads an image and stores it in a variable "a"
a=double(a);    % Converts the image to a double-precision floating-point format
//Code For Prewitt
w1=[-1 -1 -1; 0 0 0; 1 1 1]; % Prewitt filter for vertical edges
w2=[-1 0 1; -1 0 1; -1 0 1]; % Prewitt filter for horizontal edges
[row col]=size(a);
% Loop through all the pixels of the image except the border pixels
for x=2:row-1
    for y=2:col-1
        % Apply Prewitt filter for vertical edges to the image
        a1(x,y)=[w1(1)*a(x-1,y-1)+w1(2)*a(x-1,y)+w1(3)*a(x-1,y+1)+w1(4)*a(x,y-1)+w1(5)*a(x,y)+w1(6)*a(x,y+1)+w1(7)*a(x+1,y-1)+w1(8)*a(x+1,y)+w1(9)*a(x+1,y+1)];
        % Apply Prewitt filter for horizontal edges to the image
        a2(x,y)=w2(1)*a(x-1,y-1)+w2(2)*a(x-1,y)+w2(3)*a(x-1,y+1)+w2(4)*a(x,y-1)+w2(5)*a(x,y)+w2(6)*a(x,y+1)+w2(7)*a(x+1,y-1)+w2(8)*a(x+1,y)+w2(9)*a(x+1,y+1);
    end
end
//Code For Sobel
w3=[-1 -2 -1; 0 0 0; 1 2 1]; % Sobel filter for vertical edges
w4=[-1 0 1; -2 0 2; -1 0 1]; % Sobel filter for horizontal edges
[row col]=size(a);
% Loop through all the pixels of the image except the border pixels
for x=2:row-1
    for y=2:col-1
        % Apply Sobel filter for vertical edges to the image
        a3(x,y)=[w3(1)*a(x-1,y-1)+w3(2)*a(x-1,y)+w3(3)*a(x-1,y+1)+w3(4)*a(x,y-1)+w3(5)*a(x,y)+w3(6)*a(x,y+1)+w3(7)*a(x+1,y-1)+w3(8)*a(x+1,y)+w3(9)*a(x+1,y+1)];
        % Apply Sobel filter for horizontal edges to the image
        a4(x,y)=w4(1)*a(x-1,y-1)+w4(2)*a(x-1,y)+w4(3)*a(x-1,y+1)+w4(4)*a(x,y-1)+w4(5)*a(x,y)+w4(6)*a(x,y+1)+w4(7)*a(x+1,y-1)+w4(8)*a(x+1,y)+w4(9)*a(x+1,y+1);
     end   
end
% Displaying original image, Prewitt Y Gradient, Prewitt X Gradient, and Prewitt Output in a 2x4 subplot.
subplot(2,4,1);imshow(uint8(a));title("Original Image");
subplot(2,4,2);imshow(uint8(a1));title("Prewitt Y Gradient");
subplot(2,4,5);imshow(uint8(a2));title("Prewitt X Gradient");
output=a1+a2;
subplot(2,4,6);imshow(uint8(output));title("Prewitt Output");
% Displaying original image, Sobel Y Gradient, Sobel X Gradient, and Sobel Output in a 2x4 subplot.
subplot(2,4,3);imshow(uint8(a));title("Original Image");
subplot(2,4,4);imshow(uint8(a3));title("Sobel Y Gradient");
subplot(2,4,7);imshow(uint8(a4));title("Sobel X Gradient");
output1=a3+a4;
subplot(2,4,8);imshow(uint8(output1));title("Sobel Output");

Prac 10 Gaussian 
//Gaussian LPF
clc; // Clear the command window
//read image
a=imread("C:\Users\Dhruv\Desktop\cameraman.jpg"); // Read image file from path
//convert to gray image
a=rgb2gray(a); // Convert image to grayscale
a=double(a); // Convert image data type to double precision
//get row, col in c(1) and c(2)
c=size(a); // Get size of image matrix and store in variable c
N=c(1); // Store the number of rows in the image matrix

D0=input('Enter the cut off-frequency: '); // Prompt the user to enter the cutoff frequency for LPF
//creatiomn of Ideal-LPF
for u=1:1:c(1) // Loop through each row of the image matrix
    for v=1:1:c(2) // Loop through each column of the image matrix
        //calcuation of distance between (u,v) from centre
        Dx=((u-N/2)^2 + (v-N/2)^2)^0.5; // Calculate the distance between the current pixel (u,v) and the center of the image
        D=Dx*Dx; // Square the distance value
        H(u,v)=exp(-D / (2*D0*D0)); // Calculate the LPF using the distance and cutoff frequency
    end
end
//Find 2D DFT of image
vv=fft2(a); // Perform 2D Discrete Fourier Transform (DFT) on the image data
vc=fftshift(vv); // Shift the zero-frequency component to the center of the spectrum
//Scaler multiplication = convolution in spatial domain
x=vc.*H; // Perform scalar multiplication of DFT of the image with the LPF
X=abs(ifft(x)); // Perform 2D Inverse DFT on the scalar product to get the filtered image data
//plot graph
subplot(2,2,1); imshow(uint8(a)); title("Original Image"); // Display the original image in subplot 1
subplot(2,2,2); mesh(H); title("Mesh in 3D "); // Display a 3D mesh plot of the LPF in subplot 2
subplot(2,2,3); imshow(H); title("Mesh using imshow"); // Display a 2D image of the LPF in subplot 3
subplot(2,2,4); imshow(uint8(X)); title("Final Image"); // Display the filtered image in subplot 4






Prac 11 Butterworth
//Program to demonstrate butterworth low pass filter
//Read the input image 
clc; % Clear command window
original1=imread("C:\Users\Dhruv\Desktop\cameraman.jpg"); % Read input image from file path
original=rgb2gray(original1); % Convert RGB image to grayscale
original=double(original); % Convert image pixel values to double precision
[m,n]=size(original); % Store the size of the image in variables m and n
//Set the cut off frequency 
fc=20; % Set the cutoff frequency for the low-pass filter
%Specifying the filter order
N=1; % Set the order of the Butterworth filter
%Finding the center of image 
a=round(m/2); % Find the center row of the image
b=round(n/2); % Find the center column of the image
%Defining the filter kernel
% i and j are dimensions of input image
H=zeros(m,n); % Initialize the filter kernel as a matrix of zeros with the same size as the input image
for i=1:m % Loop over rows of the image
    for j=1:n % Loop over columns of the image
        d=((i-a)^2+(j-b)^2)^0.5; % Compute the distance between the current pixel and the center of the image
        H(i,j)=1/(1+((d/fc)^(2*N))); % Compute the filter kernel value at the current pixel location using the Butterworth filter equation
     end
end
%Input image to be shifted from spatial domain to frequency domain
original_freq=fftshift(fft2(original)); % Compute the 2D Fourier transform of the input image and shift the zero-frequency component to the center of the spectrum
%H is filter function, multiplication in frequency domain is noting but convolution of image and apply the butterworth LPF
applpf=(original_freq).*H; % Apply the filter kernel to the Fourier spectrum of the input image
finalout=abs(ifft(applpf)); % Compute the inverse Fourier transform of the filtered spectrum to obtain the final output image
/*
lp1=fft2(original1);
lp2=fftshift(lp1);
lp3=lp2.*c;
lp4=abs(ifft2(lp3));
*/
//Display the original image
subplot(2,2,1); imshow(original1); title("Original Image");
//Display the filter function using imshow
subplot(2,2,2); imshow(H); title("Surf using imshow");
//Display the filter function using surf in 3D
subplot(2,2,3); surf(H); title("Surf in 3D");
//Display the final output image after applying the Butterworth low pass filter
subplot(2,2,4); imshow(uint8(finalout)); title("Final Image");

Prac 12 Color Model
clc;    % Clears command window
a=imread("C:\Users\Dhruv\Desktop\cameraman.jpg");    % Reads an image from a file path and stores it in a variable 'a'
a=double(a);    % Converts the image data to double precision floating point values
[row  col dim]=size(a);    % Retrieves the dimensions of the image: rows, columns and color planes (if applicable)
red=a(:,:,1);   % Extracts the red color plane from the image
green=a(:,:,2); % Extracts the green color plane from the image
blue=a(:,:,3);  % Extracts the blue color plane from the image
plane=zeros(row, col);  % Creates a matrix of zeros with the same size as the image
RED=cat(3,red,plane,plane); % Concatenates the red color plane with two zero planes to create a 24-bit red image
GREEN=cat(3,plane,green,plane); % Concatenates the green color plane with two zero planes to create a 24-bit green image
BLUE=cat(3,plane,plane,blue);  % Concatenates the blue color plane with two zero planes to create a 24-bit blue image
% Display the original image and the three color planes separately
figure(1);
subplot(2,2,1);
imshow(uint8(a));   % Displays the original image
subplot(2,2,2);
imshow(uint8(red)); % Displays the red color plane
subplot(2,2,3);
imshow(uint8(green));   % Displays the green color plane
subplot(2,2,4);
imshow(uint8(blue));    % Displays the blue color plane
% Display the original image and the 24-bit color planes separately
figure(2);
subplot(2,2,1);
imshow(uint8(a));   % Displays the original image
subplot(2,2,2);
imshow(uint8(RED)); % Displays the 24-bit red image
subplot(2,2,3);
imshow(uint8(GREEN));   % Displays the 24-bit green image
subplot(2,2,4);
imshow(uint8(BLUE));    % Displays the 24-bit blue image



Prac 13 Edge Detection
//Edge Detection using Ordinary operator

clc; //Clears the command window
//read image
a=imread('C:\Users\Dhruv\Desktop\cameraman.jpg'); //Reads in an image file
//convert to gray image
a=rgb2gray(a); //Converts the image to grayscale
a=double(a); //Converts the pixel values to doubles for precision
//get row, col in c(1) and c(2)
[row col]=size(a); //Gets the dimensions of the image matrix
//Ordinary operators
w1=[1 0; -1 0]; //Kernel matrix for detecting vertical edges
w2=[1 -1; 0 0]; //Kernel matrix for detecting horizontal edges
for x=2:1:row-1 //Loops through the rows of the image matrix, ignoring the border
    for y=2:1:col-1 //Loops through the columns of the image matrix, ignoring the border
        a1(x,y)=w1(1)*a(x,y) + w1(2)*a(x,y+1) + w1(3)*a(x+1,y) + w1(4)*a(x+1,y+1); //Applies the vertical edge detector
        a2(x,y)=w2(1)*a(x,y) + w2(2)*a(x,y+1) + w2(3)*a(x+1,y) + w2(4)*a(x+1,y+1); //Applies the horizontal edge detector
    end
end
a3=a1+a2; //Adds the results of the two detectors to get the resultant gradient image
subplot(2,2,1);imshow(uint8(a1)) //Displays the X-gradient image
title('X-gradient image')
subplot(2,2,2);imshow(uint8(a2)) //Displays the Y-gradient image
title('Y-gradient image')
subplot(2,2,3);imshow(uint8(a3)) //Displays the resultant gradient image
title('Resultant gradient image')

//Edge Detection using Roberts operator

clc;  % clear the command window
% read image
a = imread('C:\Users\Dhruv\Desktop\cameraman.jpg');
% convert to grayscale image
a = rgb2gray(a);
% convert to double precision for calculations
a = double(a);
% get row and column size of the image
[row, col] = size(a);
% define the Roberts operators
w1 = [1 0; 0 -1];
w2 = [0 1; -1 0];
% loop through each pixel in the image, except for the borders
for x = 2:1:row-1
    for y = 2:1:col-1
        % calculate the x-gradient using the first Roberts operator
        a1(x,y) = w1(1)*a(x,y) + w1(2)*a(x,y+1) + w1(3)*a(x+1,y) + w1(4)*a(x+1,y+1);
        
       % calculate the y-gradient using the second Roberts operator
        a2(x,y) = w2(1)*a(x,y) + w2(2)*a(x,y+1) + w2(3)*a(x+1,y) + w2(4)*a(x+1,y+1);
    end
end
% combine the x-gradient and y-gradient to get the resultant gradient image
a3 = a1 + a2;

% display the original image and the three gradient images
subplot(2,2,1); imshow(uint8(a))
title('Original image')
subplot(2,2,2); imshow(uint8(a1))
title('X-gradient image')
subplot(2,2,3); imshow(uint8(a2))
title('Y-gradient image')
subplot(2,2,4); imshow(uint8(a3))
title('Resultant gradient image')

//Edge Detection using Prewitts operator

clc; //clear the command window

//read image from specified location
a=imread('C:\Users\Dhruv\Desktop\cameraman.jpg');

//convert the image to grayscale
a=rgb2gray(a);

//convert image to double precision for mathematical operations
a=double(a);

//get row and column dimensions of the image
[row col]=size(a);

//define Prewitt operators for x and y gradients
w1=[-1 -1 -1; 0 0 0; 1 1 1]; //for x-gradient
w2=[-1 0 1; -1 0 1; -1 0 1]; //for y-gradient

//iterate over each pixel in the image, excluding the border pixels
for x=2:1:row-1
    for y=2:1:col-1
        
        //calculate x-gradient of the pixel using the Prewitt operator for x-gradient
        a1(x,y)=w1(1)*a(x-1,y-1) + w1(2)*a(x-1,y) + w1(3)*a(x-1,y+1) + w1(4)*a(x,y-1)+w1(5)*a(x,y) + w1(6)*a(x,y+1) +w1(7)*a(x+1,y-1) + w1(8)*a(x+1,y) + w1(9)*a(x+1,y+1);

        //calculate y-gradient of the pixel using the Prewitt operator for y-gradient
        a2(x,y)=w2(1)*a(x-1,y-1) + w2(2)*a(x-1,y) + w2(3)*a(x-1,y+1) + w2(4)*a(x,y-1)+w2(5)*a(x,y) + w2(6)*a(x,y+1) +w2(7)*a(x+1,y-1) + w2(8)*a(x+1,y) + w2(9)*a(x+1,y+1);
        
    end
end

//calculate the resultant gradient image by adding the x and y gradients
a3=a1+a2;

//display original image, x-gradient, y-gradient, and resultant gradient images in a 2x2 grid of subplots
subplot(2,2,1);imshow(uint8(a))
title('Original image')
subplot(2,2,2);imshow(uint8(a1))
title('X-gradient image')
subplot(2,2,3);imshow(uint8(a2))
title('Y-gradient image')
subplot(2,2,4);imshow(uint8(a3))
title('Resultant gradient image')



% Edge Detection using Sobel operator
clc;
close ;
clear all;
% Read image from file
a=imread('C:\Users\Dhruv\Desktop\cameraman.jpg');
% Convert the image to grayscale
a=rgb2gray(a);
% Convert the image to double precision for mathematical operations
a=double(a);
% Get the dimensions of the image (number of rows and columns)
[row col]=size(a);
% Define Sobel operators for detecting horizontal and vertical edges
w1=[-1 -2 -1; 0 0 0; 1 2 1]; % Sobel operator for horizontal edges
w2=[-1 0 1; -2 0 2; -1 0 1]; % Sobel operator for vertical edges
% Apply Sobel operator to each pixel of the image
for x=2:1:row-1
    for y=2:1:col-1
        % Compute the gradient in the x-direction (horizontal gradient)
        a1(x,y)=w1(1)*a(x-1,y-1) + w1(2)*a(x-1,y) + w1(3)*a(x-1,y+1) + w1(4)*a(x,y-1)+w1(5)*a(x,y) + w1(6)*a(x,y+1) +w1(7)*a(x+1,y-1) + w1(8)*a(x+1,y) + w1(9)*a(x+1,y+1);

       % Compute the gradient in the y-direction (vertical gradient)
        a2(x,y)=w2(1)*a(x-1,y-1) + w2(2)*a(x-1,y) + w2(3)*a(x-1,y+1) + w2(4)*a(x,y-1)+w2(5)*a(x,y) + w2(6)*a(x,y+1) +w2(7)*a(x+1,y-1) + w2(8)*a(x+1,y) + w2(9)*a(x+1,y+1);
    end
end
% Combine the horizontal and vertical gradients to obtain the overall gradient magnitude
a3=a1+a2;

% Display the original image and the gradient images
subplot(2,2,1);imshow(uint8(a))
title('Original image')
subplot(2,2,2);imshow(uint8(a1))
title('X-gradient image')
subplot(2,2,3);imshow(uint8(a2))
title('Y-gradient image')
subplot(2,2,4);imshow(uint8(a3))
title('Resultant gradient image')

// This is a Scilab code for performing edge detection on an image using different edge detectors.
// The code uses four different edge detectors namely Sobel, Prewitt, Log and Canny.
// It then displays the original image and the four edge detected images side by side in a 2x3 subplot.
// Close any open figure windows and clear the command window
close ;
clc ;

// Read an image from the specified path and convert it to grayscale
a = imread ("C:\Users\Dhruv\Desktop\cameraman.jpg");
a = rgb2gray(a);
// Perform edge detection using different edge detectors
c = edge (a, 'sobel'); // Sobel edge detector
d = edge (a, 'prewitt'); // Prewitt edge detector
e = edge (a, 'log'); // Log edge detector
f = edge (a, 'canny'); // Canny edge detector
// Display the original image and the edge-detected images in a subplot figure
subplot(2,3,1);
imshow(a)
title ('Original Image')
subplot(2,3,2);
imshow(c)
title ('Sobel')
subplot(2,3,3);
imshow(d)
title('Prewitt')
subplot(2,3,4);
imshow(e)
title ('Log')
subplot(2,3,5);
imshow(f)
title ('Canny')

